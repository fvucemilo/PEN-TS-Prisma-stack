name: CI Pipeline

on:
  push:
    branches:
      - main
      - development
      - release
  pull_request:
    branches:
      - main
      - development
      - release

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Cache Node.js dependencies
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: yarn install

  lint:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install dependencies
        run: yarn install

      - name: Run Linter
        run: yarn lint

  test:
    runs-on: ubuntu-latest
    needs: setup
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: secret
          POSTGRES_DB: mydb
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: Install dependencies
        run: yarn install

      - name: Wait for PostgreSQL to be ready
        run: |
          sudo apt-get install -y netcat
          until nc -z -v -w30 localhost 5432
          do
            echo "Waiting for PostgreSQL..."
            sleep 5
          done

      - name: Run Prisma migrations
        run: yarn db:push

      - name: Run tests
        run: |
          docker-compose -f ./docker/docker-compose.only-db-test.yml up -d
          jest -i --colors --verbose --detectOpenHandles
          docker-compose -f ./docker/docker-compose.only-db-test.yml down

  coverage:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install dependencies
        run: yarn install

      - name: Run coverage and send to Coveralls
        env:
          COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}
        run: yarn coverage:coveralls

  deploy:
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/release'
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Deploy to production
        run: echo "Deploying to production..."
